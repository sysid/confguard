<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="24" skipped="1" tests="41" time="1.066" timestamp="2022-12-20T12:58:16.061629" hostname="LMUCM1032419"><testcase classname="test_cli.TestGuard" name="test_guard" time="0.030" /><testcase classname="test_cli" name="test__guard" time="0.015"><failure message="click.exceptions.Exit: 1">def _guard() -&gt; None:
        cfg = config.confguard.get("config")
        if cfg is None:
            typer.secho("Invalid config, check '.confguard' format.", fg=typer.colors.RED)
            return
        targets = cfg.get("targets")
        if cfg is None:
            typer.secho("Invalid config, check '.confguard' format.", fg=typer.colors.RED)
            return
    
        Sentinel.create()
        bkp_dir = Path.cwd() / CONFGUARD_BKP_DIR
        target_dir = config.confguard_path / config.sentinel
        # backup as tx prerequisite
        files = Files(
            rel_target_dir=config.sentinel, source_dir=Path.cwd(), targets=targets
        )
        try:
            files.create_bkp(source_dir=Path.cwd(), bkp_dir=bkp_dir)
        except Exception as e:
            typer.secho(f"Error occurred, Aborting: {e}", fg=typer.colors.RED)
            files.delete_dir(dir_=bkp_dir)
            Sentinel.remove()
            raise typer.Exit(1)
    
        lks = Links(source_dir=Path.cwd(), target_dir=target_dir, targets=targets)
        try:
            files.move_files(source_dir=Path.cwd(), target_dir=target_dir)
&gt;           lks.create()

src/confguard/main.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Links(targets=['.envrc', '.run'], source_dir=PosixPath('/Users/Q187392/dev/s/private/confguard'), target_dir=PosixPath('/tmp/confgruard/confguard-616a0b3b')), is_relative = False

    def create(self, is_relative: bool = False) -&gt; None:
        for rel_path in self.targets:
            tgt_path = self.target_dir / rel_path
            src_path = self.source_dir / rel_path
    
            if is_relative:
                tgt_path = _create_relative_path(str(src_path), str(tgt_path))
    
            _log.debug(f"Creating link {src_path} to {tgt_path}")
&gt;           src_path.symlink_to(tgt_path)

src/confguard/services.py:176: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = PosixPath('/Users/Q187392/dev/s/private/confguard/.envrc'), target = PosixPath('/tmp/confgruard/confguard-616a0b3b/.envrc'), target_is_directory = False

    def symlink_to(self, target, target_is_directory=False):
        """
        Make this path a symlink pointing to the target path.
        Note the order of arguments (link, target) is the reverse of os.symlink.
        """
        if not hasattr(os, "symlink"):
            raise NotImplementedError("os.symlink() not available on this system")
&gt;       os.symlink(target, self, target_is_directory)
E       FileExistsError: [Errno 17] File exists: '/tmp/confgruard/confguard-616a0b3b/.envrc' -&gt; '/Users/Q187392/dev/s/private/confguard/.envrc'

../../../../.asdf/installs/python/3.11.1/lib/python3.11/pathlib.py:1198: FileExistsError

During handling of the above exception, another exception occurred:

    def test__guard():
        test_proj = ROOT_DIR / "tests/resources/test_proj"
&gt;       _guard()

tests/test_cli.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def _guard() -&gt; None:
        cfg = config.confguard.get("config")
        if cfg is None:
            typer.secho("Invalid config, check '.confguard' format.", fg=typer.colors.RED)
            return
        targets = cfg.get("targets")
        if cfg is None:
            typer.secho("Invalid config, check '.confguard' format.", fg=typer.colors.RED)
            return
    
        Sentinel.create()
        bkp_dir = Path.cwd() / CONFGUARD_BKP_DIR
        target_dir = config.confguard_path / config.sentinel
        # backup as tx prerequisite
        files = Files(
            rel_target_dir=config.sentinel, source_dir=Path.cwd(), targets=targets
        )
        try:
            files.create_bkp(source_dir=Path.cwd(), bkp_dir=bkp_dir)
        except Exception as e:
            typer.secho(f"Error occurred, Aborting: {e}", fg=typer.colors.RED)
            files.delete_dir(dir_=bkp_dir)
            Sentinel.remove()
            raise typer.Exit(1)
    
        lks = Links(source_dir=Path.cwd(), target_dir=target_dir, targets=targets)
        try:
            files.move_files(source_dir=Path.cwd(), target_dir=target_dir)
            lks.create()
            lks.back_create()
        except Exception as e:
            typer.secho(f"Error occurred, rolling back: {e}", fg=typer.colors.RED)
            lks.remove()
            lks.back_remove()
            files.restore_bkp(source_dir=Path.cwd(), bkp_dir=bkp_dir)
&gt;           raise typer.Exit(1)
E           click.exceptions.Exit: 1

src/confguard/main.py:86: Exit</failure></testcase><testcase classname="test_cli" name="test__unguard" time="0.012"><failure message="click.exceptions.Exit: 1">def _guard() -&gt; None:
        cfg = config.confguard.get("config")
        if cfg is None:
            typer.secho("Invalid config, check '.confguard' format.", fg=typer.colors.RED)
            return
        targets = cfg.get("targets")
        if cfg is None:
            typer.secho("Invalid config, check '.confguard' format.", fg=typer.colors.RED)
            return
    
        Sentinel.create()
        bkp_dir = Path.cwd() / CONFGUARD_BKP_DIR
        target_dir = config.confguard_path / config.sentinel
        # backup as tx prerequisite
        files = Files(
            rel_target_dir=config.sentinel, source_dir=Path.cwd(), targets=targets
        )
        try:
            files.create_bkp(source_dir=Path.cwd(), bkp_dir=bkp_dir)
        except Exception as e:
            typer.secho(f"Error occurred, Aborting: {e}", fg=typer.colors.RED)
            files.delete_dir(dir_=bkp_dir)
            Sentinel.remove()
            raise typer.Exit(1)
    
        lks = Links(source_dir=Path.cwd(), target_dir=target_dir, targets=targets)
        try:
            files.move_files(source_dir=Path.cwd(), target_dir=target_dir)
&gt;           lks.create()

src/confguard/main.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Links(targets=['.envrc', '.run'], source_dir=PosixPath('/Users/Q187392/dev/s/private/confguard'), target_dir=PosixPath('/tmp/confgruard/confguard-616a0b3b')), is_relative = False

    def create(self, is_relative: bool = False) -&gt; None:
        for rel_path in self.targets:
            tgt_path = self.target_dir / rel_path
            src_path = self.source_dir / rel_path
    
            if is_relative:
                tgt_path = _create_relative_path(str(src_path), str(tgt_path))
    
            _log.debug(f"Creating link {src_path} to {tgt_path}")
&gt;           src_path.symlink_to(tgt_path)

src/confguard/services.py:176: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = PosixPath('/Users/Q187392/dev/s/private/confguard/.envrc'), target = PosixPath('/tmp/confgruard/confguard-616a0b3b/.envrc'), target_is_directory = False

    def symlink_to(self, target, target_is_directory=False):
        """
        Make this path a symlink pointing to the target path.
        Note the order of arguments (link, target) is the reverse of os.symlink.
        """
        if not hasattr(os, "symlink"):
            raise NotImplementedError("os.symlink() not available on this system")
&gt;       os.symlink(target, self, target_is_directory)
E       FileExistsError: [Errno 17] File exists: '/tmp/confgruard/confguard-616a0b3b/.envrc' -&gt; '/Users/Q187392/dev/s/private/confguard/.envrc'

../../../../.asdf/installs/python/3.11.1/lib/python3.11/pathlib.py:1198: FileExistsError

During handling of the above exception, another exception occurred:

    def test__unguard():
        # given
        test_proj = ROOT_DIR / "tests/resources/test_proj"
&gt;       _guard()

tests/test_cli.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def _guard() -&gt; None:
        cfg = config.confguard.get("config")
        if cfg is None:
            typer.secho("Invalid config, check '.confguard' format.", fg=typer.colors.RED)
            return
        targets = cfg.get("targets")
        if cfg is None:
            typer.secho("Invalid config, check '.confguard' format.", fg=typer.colors.RED)
            return
    
        Sentinel.create()
        bkp_dir = Path.cwd() / CONFGUARD_BKP_DIR
        target_dir = config.confguard_path / config.sentinel
        # backup as tx prerequisite
        files = Files(
            rel_target_dir=config.sentinel, source_dir=Path.cwd(), targets=targets
        )
        try:
            files.create_bkp(source_dir=Path.cwd(), bkp_dir=bkp_dir)
        except Exception as e:
            typer.secho(f"Error occurred, Aborting: {e}", fg=typer.colors.RED)
            files.delete_dir(dir_=bkp_dir)
            Sentinel.remove()
            raise typer.Exit(1)
    
        lks = Links(source_dir=Path.cwd(), target_dir=target_dir, targets=targets)
        try:
            files.move_files(source_dir=Path.cwd(), target_dir=target_dir)
            lks.create()
            lks.back_create()
        except Exception as e:
            typer.secho(f"Error occurred, rolling back: {e}", fg=typer.colors.RED)
            lks.remove()
            lks.back_remove()
            files.restore_bkp(source_dir=Path.cwd(), bkp_dir=bkp_dir)
&gt;           raise typer.Exit(1)
E           click.exceptions.Exit: 1

src/confguard/main.py:86: Exit</failure></testcase><testcase classname="test_environment" name="test_sentinel" time="0.000"><skipped type="pytest.skip" message="requires manual reset of .confguard, 2x run">/Users/Q187392/dev/s/private/confguard/tests/test_environment.py:7: requires manual reset of .confguard, 2x run</skipped></testcase><testcase classname="test_environment" name="test_add_sentinel" time="0.010" /><testcase classname="test_environment" name="test_update_sentinel" time="0.020" /><testcase classname="test_environment" name="test_remove_sentinel" time="0.009" /><testcase classname="test_helper" name="test_find_relative_path[/c/b/a/xxx/.envrc-/c/y/xxx-123/.envrc-../../../y/xxx-123/.envrc]" time="0.008" /><testcase classname="test_helper" name="test_find_relative_path[/c/b/a/xxx/.envrc-/tmp/y/xxx-123/.envrc-../../../../tmp/y/xxx-123/.envrc]" time="0.012" /><testcase classname="test_helper" name="test_find_relative_path[/c/xxx/.envrc-/c/y/xxx-123/.envrc-../y/xxx-123/.envrc]" time="0.006" /><testcase classname="test_helper" name="test_find_relative_path_builtin[/c/b/a/xxx/.envrc-/c/y/xxx-123/.envrc-../../../y/xxx-123/.envrc]" time="0.006" /><testcase classname="test_helper" name="test_find_relative_path_builtin[/c/b/a/xxx/.envrc-/tmp/y/xxx-123/.envrc-../../../../tmp/y/xxx-123/.envrc]" time="0.006" /><testcase classname="test_helper" name="test_find_relative_path_builtin[/c/xxx/.envrc-/c/y/xxx-123/.envrc-../y/xxx-123/.envrc]" time="0.007" /><testcase classname="test_services.TestSentinel" name="test_create" time="0.008" /><testcase classname="test_services.TestSentinel" name="test_create_sentinel_exists" time="0.007" /><testcase classname="test_services.TestSentinel" name="test_remove" time="0.007" /><testcase classname="test_services.TestFiles" name="test_create_bkp[targets0]" time="0.008"><failure message="AssertionError: assert 0 == 1&#10; +  where 0 = len([])&#10; +    where [] = list(&lt;generator object Path.glob at 0x1073a7bc0&gt;)&#10; +      where &lt;generator object Path.glob at 0x1073a7bc0&gt; = &lt;bound method Path.glob of PosixPath('/Users/Q187392/dev/s/private/confguard/.confguard.bkp')&gt;('*')&#10; +        where &lt;bound method Path.glob of PosixPath('/Users/Q187392/dev/s/private/confguard/.confguard.bkp')&gt; = PosixPath('/Users/Q187392/dev/s/private/confguard/.confguard.bkp').glob&#10; +  and   1 = len(['xxx/xxx.txt'])">self = &lt;tests.test_services.TestFiles object at 0x107358090&gt;, targets = ['xxx/xxx.txt']

    @pytest.mark.parametrize(
        "targets",
        (
            ["xxx/xxx.txt"],
            [".run"],
            [".envrc", ".run"],
            [".envrc", ".run", "xxx/xxx.txt"],
        ),
    )
    def test_create_bkp(self, targets):
        bkp_dir = Path.cwd() / CONFGUARD_BKP_DIR
        f = Files(rel_target_dir=SENTINEL, source_dir=Path.cwd(), targets=targets)
        f.create_bkp(source_dir=Path.cwd(), bkp_dir=bkp_dir)
    
        assert bkp_dir.exists()
&gt;       assert len(list(bkp_dir.glob("*"))) == len(targets)
E       AssertionError: assert 0 == 1
E        +  where 0 = len([])
E        +    where [] = list(&lt;generator object Path.glob at 0x1073a7bc0&gt;)
E        +      where &lt;generator object Path.glob at 0x1073a7bc0&gt; = &lt;bound method Path.glob of PosixPath('/Users/Q187392/dev/s/private/confguard/.confguard.bkp')&gt;('*')
E        +        where &lt;bound method Path.glob of PosixPath('/Users/Q187392/dev/s/private/confguard/.confguard.bkp')&gt; = PosixPath('/Users/Q187392/dev/s/private/confguard/.confguard.bkp').glob
E        +  and   1 = len(['xxx/xxx.txt'])

tests/test_services.py:50: AssertionError</failure></testcase><testcase classname="test_services.TestFiles" name="test_create_bkp[targets1]" time="0.009"><failure message="confguard.exceptions.BackupExistError: Backup dir /Users/Q187392/dev/s/private/confguard/.confguard.bkp already exists.">self = Files(source_dir=PosixPath('/Users/Q187392/dev/s/private/confguard'), rel_target_dir=PosixPath('test_proj-1234'), target_dir=PosixPath('/tmp/confgruard/test_proj-1234'), targets=['.run'], target_locations=[], source_locations=[])
source_dir = PosixPath('/Users/Q187392/dev/s/private/confguard'), bkp_dir = PosixPath('/Users/Q187392/dev/s/private/confguard/.confguard.bkp')

    def create_bkp(self, source_dir: Path, bkp_dir: Path) -&gt; None:
        try:
&gt;           Path(bkp_dir).mkdir(parents=True, exist_ok=False)

src/confguard/services.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = PosixPath('/Users/Q187392/dev/s/private/confguard/.confguard.bkp'), mode = 511, parents = True, exist_ok = False

    def mkdir(self, mode=0o777, parents=False, exist_ok=False):
        """
        Create a new directory at this given path.
        """
        try:
&gt;           os.mkdir(self, mode)
E           FileExistsError: [Errno 17] File exists: '/Users/Q187392/dev/s/private/confguard/.confguard.bkp'

../../../../.asdf/installs/python/3.11.1/lib/python3.11/pathlib.py:1116: FileExistsError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_services.TestFiles object at 0x1073582d0&gt;, targets = ['.run']

    @pytest.mark.parametrize(
        "targets",
        (
            ["xxx/xxx.txt"],
            [".run"],
            [".envrc", ".run"],
            [".envrc", ".run", "xxx/xxx.txt"],
        ),
    )
    def test_create_bkp(self, targets):
        bkp_dir = Path.cwd() / CONFGUARD_BKP_DIR
        f = Files(rel_target_dir=SENTINEL, source_dir=Path.cwd(), targets=targets)
&gt;       f.create_bkp(source_dir=Path.cwd(), bkp_dir=bkp_dir)

tests/test_services.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Files(source_dir=PosixPath('/Users/Q187392/dev/s/private/confguard'), rel_target_dir=PosixPath('test_proj-1234'), target_dir=PosixPath('/tmp/confgruard/test_proj-1234'), targets=['.run'], target_locations=[], source_locations=[])
source_dir = PosixPath('/Users/Q187392/dev/s/private/confguard'), bkp_dir = PosixPath('/Users/Q187392/dev/s/private/confguard/.confguard.bkp')

    def create_bkp(self, source_dir: Path, bkp_dir: Path) -&gt; None:
        try:
            Path(bkp_dir).mkdir(parents=True, exist_ok=False)
        except FileExistsError:
&gt;           raise BackupExistError(f"Backup dir {bkp_dir} already exists.")
E           confguard.exceptions.BackupExistError: Backup dir /Users/Q187392/dev/s/private/confguard/.confguard.bkp already exists.

src/confguard/services.py:87: BackupExistError</failure></testcase><testcase classname="test_services.TestFiles" name="test_create_bkp[targets2]" time="0.008"><failure message="confguard.exceptions.BackupExistError: Backup dir /Users/Q187392/dev/s/private/confguard/.confguard.bkp already exists.">self = Files(source_dir=PosixPath('/Users/Q187392/dev/s/private/confguard'), rel_target_dir=PosixPath('test_proj-1234'), target_dir=PosixPath('/tmp/confgruard/test_proj-1234'), targets=['.envrc', '.run'], target_locations=[], source_locations=[])
source_dir = PosixPath('/Users/Q187392/dev/s/private/confguard'), bkp_dir = PosixPath('/Users/Q187392/dev/s/private/confguard/.confguard.bkp')

    def create_bkp(self, source_dir: Path, bkp_dir: Path) -&gt; None:
        try:
&gt;           Path(bkp_dir).mkdir(parents=True, exist_ok=False)

src/confguard/services.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = PosixPath('/Users/Q187392/dev/s/private/confguard/.confguard.bkp'), mode = 511, parents = True, exist_ok = False

    def mkdir(self, mode=0o777, parents=False, exist_ok=False):
        """
        Create a new directory at this given path.
        """
        try:
&gt;           os.mkdir(self, mode)
E           FileExistsError: [Errno 17] File exists: '/Users/Q187392/dev/s/private/confguard/.confguard.bkp'

../../../../.asdf/installs/python/3.11.1/lib/python3.11/pathlib.py:1116: FileExistsError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_services.TestFiles object at 0x107358890&gt;, targets = ['.envrc', '.run']

    @pytest.mark.parametrize(
        "targets",
        (
            ["xxx/xxx.txt"],
            [".run"],
            [".envrc", ".run"],
            [".envrc", ".run", "xxx/xxx.txt"],
        ),
    )
    def test_create_bkp(self, targets):
        bkp_dir = Path.cwd() / CONFGUARD_BKP_DIR
        f = Files(rel_target_dir=SENTINEL, source_dir=Path.cwd(), targets=targets)
&gt;       f.create_bkp(source_dir=Path.cwd(), bkp_dir=bkp_dir)

tests/test_services.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Files(source_dir=PosixPath('/Users/Q187392/dev/s/private/confguard'), rel_target_dir=PosixPath('test_proj-1234'), target_dir=PosixPath('/tmp/confgruard/test_proj-1234'), targets=['.envrc', '.run'], target_locations=[], source_locations=[])
source_dir = PosixPath('/Users/Q187392/dev/s/private/confguard'), bkp_dir = PosixPath('/Users/Q187392/dev/s/private/confguard/.confguard.bkp')

    def create_bkp(self, source_dir: Path, bkp_dir: Path) -&gt; None:
        try:
            Path(bkp_dir).mkdir(parents=True, exist_ok=False)
        except FileExistsError:
&gt;           raise BackupExistError(f"Backup dir {bkp_dir} already exists.")
E           confguard.exceptions.BackupExistError: Backup dir /Users/Q187392/dev/s/private/confguard/.confguard.bkp already exists.

src/confguard/services.py:87: BackupExistError</failure></testcase><testcase classname="test_services.TestFiles" name="test_create_bkp[targets3]" time="0.013"><failure message="confguard.exceptions.BackupExistError: Backup dir /Users/Q187392/dev/s/private/confguard/.confguard.bkp already exists.">self = Files(source_dir=PosixPath('/Users/Q187392/dev/s/private/confguard'), rel_target_dir=PosixPath('test_proj-1234'), targ...'/tmp/confgruard/test_proj-1234'), targets=['.envrc', '.run', 'xxx/xxx.txt'], target_locations=[], source_locations=[])
source_dir = PosixPath('/Users/Q187392/dev/s/private/confguard'), bkp_dir = PosixPath('/Users/Q187392/dev/s/private/confguard/.confguard.bkp')

    def create_bkp(self, source_dir: Path, bkp_dir: Path) -&gt; None:
        try:
&gt;           Path(bkp_dir).mkdir(parents=True, exist_ok=False)

src/confguard/services.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = PosixPath('/Users/Q187392/dev/s/private/confguard/.confguard.bkp'), mode = 511, parents = True, exist_ok = False

    def mkdir(self, mode=0o777, parents=False, exist_ok=False):
        """
        Create a new directory at this given path.
        """
        try:
&gt;           os.mkdir(self, mode)
E           FileExistsError: [Errno 17] File exists: '/Users/Q187392/dev/s/private/confguard/.confguard.bkp'

../../../../.asdf/installs/python/3.11.1/lib/python3.11/pathlib.py:1116: FileExistsError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_services.TestFiles object at 0x107358650&gt;, targets = ['.envrc', '.run', 'xxx/xxx.txt']

    @pytest.mark.parametrize(
        "targets",
        (
            ["xxx/xxx.txt"],
            [".run"],
            [".envrc", ".run"],
            [".envrc", ".run", "xxx/xxx.txt"],
        ),
    )
    def test_create_bkp(self, targets):
        bkp_dir = Path.cwd() / CONFGUARD_BKP_DIR
        f = Files(rel_target_dir=SENTINEL, source_dir=Path.cwd(), targets=targets)
&gt;       f.create_bkp(source_dir=Path.cwd(), bkp_dir=bkp_dir)

tests/test_services.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Files(source_dir=PosixPath('/Users/Q187392/dev/s/private/confguard'), rel_target_dir=PosixPath('test_proj-1234'), targ...'/tmp/confgruard/test_proj-1234'), targets=['.envrc', '.run', 'xxx/xxx.txt'], target_locations=[], source_locations=[])
source_dir = PosixPath('/Users/Q187392/dev/s/private/confguard'), bkp_dir = PosixPath('/Users/Q187392/dev/s/private/confguard/.confguard.bkp')

    def create_bkp(self, source_dir: Path, bkp_dir: Path) -&gt; None:
        try:
            Path(bkp_dir).mkdir(parents=True, exist_ok=False)
        except FileExistsError:
&gt;           raise BackupExistError(f"Backup dir {bkp_dir} already exists.")
E           confguard.exceptions.BackupExistError: Backup dir /Users/Q187392/dev/s/private/confguard/.confguard.bkp already exists.

src/confguard/services.py:87: BackupExistError</failure></testcase><testcase classname="test_services.TestFiles" name="test_create_bkp_but_bkp_dir_exists[targets0]" time="0.012"><failure message="confguard.exceptions.BackupExistError: Backup dir /Users/Q187392/dev/s/private/confguard/.confguard.bkp already exists.">self = Files(source_dir=PosixPath('/Users/Q187392/dev/s/private/confguard'), rel_target_dir=PosixPath('test_proj-1234'), target_dir=PosixPath('/tmp/confgruard/test_proj-1234'), targets=['.envrc'], target_locations=[], source_locations=[])
source_dir = PosixPath('/Users/Q187392/dev/s/private/confguard'), bkp_dir = PosixPath('/Users/Q187392/dev/s/private/confguard/.confguard.bkp')

    def create_bkp(self, source_dir: Path, bkp_dir: Path) -&gt; None:
        try:
&gt;           Path(bkp_dir).mkdir(parents=True, exist_ok=False)

src/confguard/services.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = PosixPath('/Users/Q187392/dev/s/private/confguard/.confguard.bkp'), mode = 511, parents = True, exist_ok = False

    def mkdir(self, mode=0o777, parents=False, exist_ok=False):
        """
        Create a new directory at this given path.
        """
        try:
&gt;           os.mkdir(self, mode)
E           FileExistsError: [Errno 17] File exists: '/Users/Q187392/dev/s/private/confguard/.confguard.bkp'

../../../../.asdf/installs/python/3.11.1/lib/python3.11/pathlib.py:1116: FileExistsError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_services.TestFiles object at 0x107376c10&gt;, targets = ['.envrc']

    @pytest.mark.parametrize("targets", ([".envrc"],))
    def test_create_bkp_but_bkp_dir_exists(self, targets):
        bkp_dir = Path.cwd() / CONFGUARD_BKP_DIR
        f = Files(rel_target_dir=SENTINEL, source_dir=Path.cwd(), targets=targets)
&gt;       f.create_bkp(source_dir=Path.cwd(), bkp_dir=bkp_dir)

tests/test_services.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Files(source_dir=PosixPath('/Users/Q187392/dev/s/private/confguard'), rel_target_dir=PosixPath('test_proj-1234'), target_dir=PosixPath('/tmp/confgruard/test_proj-1234'), targets=['.envrc'], target_locations=[], source_locations=[])
source_dir = PosixPath('/Users/Q187392/dev/s/private/confguard'), bkp_dir = PosixPath('/Users/Q187392/dev/s/private/confguard/.confguard.bkp')

    def create_bkp(self, source_dir: Path, bkp_dir: Path) -&gt; None:
        try:
            Path(bkp_dir).mkdir(parents=True, exist_ok=False)
        except FileExistsError:
&gt;           raise BackupExistError(f"Backup dir {bkp_dir} already exists.")
E           confguard.exceptions.BackupExistError: Backup dir /Users/Q187392/dev/s/private/confguard/.confguard.bkp already exists.

src/confguard/services.py:87: BackupExistError</failure></testcase><testcase classname="test_services.TestFiles" name="test_create_bkp_of_target_dir[targets0]" time="0.009"><failure message="AssertionError: assert 0 == 3&#10; +  where 0 = len([])&#10; +    where [] = list(&lt;generator object Path.glob at 0x1073a7120&gt;)&#10; +      where &lt;generator object Path.glob at 0x1073a7120&gt; = &lt;bound method Path.glob of PosixPath('/tmp/confgruard/test_proj-1234/.confguard.bkp')&gt;('*')&#10; +        where &lt;bound method Path.glob of PosixPath('/tmp/confgruard/test_proj-1234/.confguard.bkp')&gt; = PosixPath('/tmp/confgruard/test_proj-1234/.confguard.bkp').glob&#10; +  and   3 = len(['.envrc', '.run', 'xxx/xxx.txt'])">self = &lt;tests.test_services.TestFiles object at 0x1073771d0&gt;, targets = ['.envrc', '.run', 'xxx/xxx.txt']

    @pytest.mark.parametrize("targets", ([".envrc", ".run", "xxx/xxx.txt"],))
    def test_create_bkp_of_target_dir(self, targets):
        bkp_dir = TARGET_DIR / CONFGUARD_BKP_DIR
        f = Files(rel_target_dir=SENTINEL, source_dir=Path.cwd(), targets=targets)
        f.move_files(source_dir=Path.cwd(), target_dir=TARGET_DIR)
    
        f.create_bkp(source_dir=TARGET_DIR, bkp_dir=bkp_dir)
    
        assert bkp_dir.exists()
&gt;       assert len(list(bkp_dir.glob("*"))) == len(targets)
E       AssertionError: assert 0 == 3
E        +  where 0 = len([])
E        +    where [] = list(&lt;generator object Path.glob at 0x1073a7120&gt;)
E        +      where &lt;generator object Path.glob at 0x1073a7120&gt; = &lt;bound method Path.glob of PosixPath('/tmp/confgruard/test_proj-1234/.confguard.bkp')&gt;('*')
E        +        where &lt;bound method Path.glob of PosixPath('/tmp/confgruard/test_proj-1234/.confguard.bkp')&gt; = PosixPath('/tmp/confgruard/test_proj-1234/.confguard.bkp').glob
E        +  and   3 = len(['.envrc', '.run', 'xxx/xxx.txt'])

tests/test_services.py:72: AssertionError</failure></testcase><testcase classname="test_services.TestFiles" name="test_restore_bkp[targets0]" time="0.008"><failure message="confguard.exceptions.BackupExistError: Backup dir /Users/Q187392/dev/s/private/confguard/.confguard.bkp already exists.">self = Files(source_dir=PosixPath('/Users/Q187392/dev/s/private/confguard'), rel_target_dir=PosixPath('test_proj-1234'), target_dir=PosixPath('/tmp/confgruard/test_proj-1234'), targets=['xxx/xxx.txt'], target_locations=[], source_locations=[])
source_dir = PosixPath('/Users/Q187392/dev/s/private/confguard'), bkp_dir = PosixPath('/Users/Q187392/dev/s/private/confguard/.confguard.bkp')

    def create_bkp(self, source_dir: Path, bkp_dir: Path) -&gt; None:
        try:
&gt;           Path(bkp_dir).mkdir(parents=True, exist_ok=False)

src/confguard/services.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = PosixPath('/Users/Q187392/dev/s/private/confguard/.confguard.bkp'), mode = 511, parents = True, exist_ok = False

    def mkdir(self, mode=0o777, parents=False, exist_ok=False):
        """
        Create a new directory at this given path.
        """
        try:
&gt;           os.mkdir(self, mode)
E           FileExistsError: [Errno 17] File exists: '/Users/Q187392/dev/s/private/confguard/.confguard.bkp'

../../../../.asdf/installs/python/3.11.1/lib/python3.11/pathlib.py:1116: FileExistsError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_services.TestFiles object at 0x107377b10&gt;, targets = ['xxx/xxx.txt']

    @pytest.mark.parametrize(
        "targets",
        (
            ["xxx/xxx.txt"],
            [".envrc", ".run", "xxx/xxx.txt"],
        ),
    )
    def test_restore_bkp(self, targets):
        # given: backup created
        bkp_dir = Path.cwd() / CONFGUARD_BKP_DIR
        f = Files(rel_target_dir=SENTINEL, source_dir=Path.cwd(), targets=targets)
&gt;       f.create_bkp(source_dir=Path.cwd(), bkp_dir=bkp_dir)

tests/test_services.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Files(source_dir=PosixPath('/Users/Q187392/dev/s/private/confguard'), rel_target_dir=PosixPath('test_proj-1234'), target_dir=PosixPath('/tmp/confgruard/test_proj-1234'), targets=['xxx/xxx.txt'], target_locations=[], source_locations=[])
source_dir = PosixPath('/Users/Q187392/dev/s/private/confguard'), bkp_dir = PosixPath('/Users/Q187392/dev/s/private/confguard/.confguard.bkp')

    def create_bkp(self, source_dir: Path, bkp_dir: Path) -&gt; None:
        try:
            Path(bkp_dir).mkdir(parents=True, exist_ok=False)
        except FileExistsError:
&gt;           raise BackupExistError(f"Backup dir {bkp_dir} already exists.")
E           confguard.exceptions.BackupExistError: Backup dir /Users/Q187392/dev/s/private/confguard/.confguard.bkp already exists.

src/confguard/services.py:87: BackupExistError</failure></testcase><testcase classname="test_services.TestFiles" name="test_restore_bkp[targets1]" time="0.008"><failure message="confguard.exceptions.BackupExistError: Backup dir /Users/Q187392/dev/s/private/confguard/.confguard.bkp already exists.">self = Files(source_dir=PosixPath('/Users/Q187392/dev/s/private/confguard'), rel_target_dir=PosixPath('test_proj-1234'), targ...'/tmp/confgruard/test_proj-1234'), targets=['.envrc', '.run', 'xxx/xxx.txt'], target_locations=[], source_locations=[])
source_dir = PosixPath('/Users/Q187392/dev/s/private/confguard'), bkp_dir = PosixPath('/Users/Q187392/dev/s/private/confguard/.confguard.bkp')

    def create_bkp(self, source_dir: Path, bkp_dir: Path) -&gt; None:
        try:
&gt;           Path(bkp_dir).mkdir(parents=True, exist_ok=False)

src/confguard/services.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = PosixPath('/Users/Q187392/dev/s/private/confguard/.confguard.bkp'), mode = 511, parents = True, exist_ok = False

    def mkdir(self, mode=0o777, parents=False, exist_ok=False):
        """
        Create a new directory at this given path.
        """
        try:
&gt;           os.mkdir(self, mode)
E           FileExistsError: [Errno 17] File exists: '/Users/Q187392/dev/s/private/confguard/.confguard.bkp'

../../../../.asdf/installs/python/3.11.1/lib/python3.11/pathlib.py:1116: FileExistsError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_services.TestFiles object at 0x107376a10&gt;, targets = ['.envrc', '.run', 'xxx/xxx.txt']

    @pytest.mark.parametrize(
        "targets",
        (
            ["xxx/xxx.txt"],
            [".envrc", ".run", "xxx/xxx.txt"],
        ),
    )
    def test_restore_bkp(self, targets):
        # given: backup created
        bkp_dir = Path.cwd() / CONFGUARD_BKP_DIR
        f = Files(rel_target_dir=SENTINEL, source_dir=Path.cwd(), targets=targets)
&gt;       f.create_bkp(source_dir=Path.cwd(), bkp_dir=bkp_dir)

tests/test_services.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Files(source_dir=PosixPath('/Users/Q187392/dev/s/private/confguard'), rel_target_dir=PosixPath('test_proj-1234'), targ...'/tmp/confgruard/test_proj-1234'), targets=['.envrc', '.run', 'xxx/xxx.txt'], target_locations=[], source_locations=[])
source_dir = PosixPath('/Users/Q187392/dev/s/private/confguard'), bkp_dir = PosixPath('/Users/Q187392/dev/s/private/confguard/.confguard.bkp')

    def create_bkp(self, source_dir: Path, bkp_dir: Path) -&gt; None:
        try:
            Path(bkp_dir).mkdir(parents=True, exist_ok=False)
        except FileExistsError:
&gt;           raise BackupExistError(f"Backup dir {bkp_dir} already exists.")
E           confguard.exceptions.BackupExistError: Backup dir /Users/Q187392/dev/s/private/confguard/.confguard.bkp already exists.

src/confguard/services.py:87: BackupExistError</failure></testcase><testcase classname="test_services.TestFiles" name="test_delete_bkp[targets0]" time="0.021"><failure message="confguard.exceptions.BackupExistError: Backup dir /Users/Q187392/dev/s/private/confguard/.confguard.bkp already exists.">self = Files(source_dir=PosixPath('/Users/Q187392/dev/s/private/confguard'), rel_target_dir=PosixPath('test_proj-1234'), target_dir=PosixPath('/tmp/confgruard/test_proj-1234'), targets=['xxx/xxx.txt'], target_locations=[], source_locations=[])
source_dir = PosixPath('/Users/Q187392/dev/s/private/confguard'), bkp_dir = PosixPath('/Users/Q187392/dev/s/private/confguard/.confguard.bkp')

    def create_bkp(self, source_dir: Path, bkp_dir: Path) -&gt; None:
        try:
&gt;           Path(bkp_dir).mkdir(parents=True, exist_ok=False)

src/confguard/services.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = PosixPath('/Users/Q187392/dev/s/private/confguard/.confguard.bkp'), mode = 511, parents = True, exist_ok = False

    def mkdir(self, mode=0o777, parents=False, exist_ok=False):
        """
        Create a new directory at this given path.
        """
        try:
&gt;           os.mkdir(self, mode)
E           FileExistsError: [Errno 17] File exists: '/Users/Q187392/dev/s/private/confguard/.confguard.bkp'

../../../../.asdf/installs/python/3.11.1/lib/python3.11/pathlib.py:1116: FileExistsError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_services.TestFiles object at 0x1073743d0&gt;, targets = ['xxx/xxx.txt']

    @pytest.mark.parametrize(
        "targets",
        (
            ["xxx/xxx.txt"],
            [".run"],
            [".envrc", ".run"],
            [".envrc", ".run", "xxx/xxx.txt"],
        ),
    )
    def test_delete_bkp(self, targets):
        bkp_dir = Path.cwd() / CONFGUARD_BKP_DIR
        f = Files(rel_target_dir=SENTINEL, source_dir=Path.cwd(), targets=targets)
&gt;       f.create_bkp(source_dir=Path.cwd(), bkp_dir=bkp_dir)

tests/test_services.py:118: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Files(source_dir=PosixPath('/Users/Q187392/dev/s/private/confguard'), rel_target_dir=PosixPath('test_proj-1234'), target_dir=PosixPath('/tmp/confgruard/test_proj-1234'), targets=['xxx/xxx.txt'], target_locations=[], source_locations=[])
source_dir = PosixPath('/Users/Q187392/dev/s/private/confguard'), bkp_dir = PosixPath('/Users/Q187392/dev/s/private/confguard/.confguard.bkp')

    def create_bkp(self, source_dir: Path, bkp_dir: Path) -&gt; None:
        try:
            Path(bkp_dir).mkdir(parents=True, exist_ok=False)
        except FileExistsError:
&gt;           raise BackupExistError(f"Backup dir {bkp_dir} already exists.")
E           confguard.exceptions.BackupExistError: Backup dir /Users/Q187392/dev/s/private/confguard/.confguard.bkp already exists.

src/confguard/services.py:87: BackupExistError</failure></testcase><testcase classname="test_services.TestFiles" name="test_delete_bkp[targets1]" time="0.012"><failure message="confguard.exceptions.BackupExistError: Backup dir /Users/Q187392/dev/s/private/confguard/.confguard.bkp already exists.">self = Files(source_dir=PosixPath('/Users/Q187392/dev/s/private/confguard'), rel_target_dir=PosixPath('test_proj-1234'), target_dir=PosixPath('/tmp/confgruard/test_proj-1234'), targets=['.run'], target_locations=[], source_locations=[])
source_dir = PosixPath('/Users/Q187392/dev/s/private/confguard'), bkp_dir = PosixPath('/Users/Q187392/dev/s/private/confguard/.confguard.bkp')

    def create_bkp(self, source_dir: Path, bkp_dir: Path) -&gt; None:
        try:
&gt;           Path(bkp_dir).mkdir(parents=True, exist_ok=False)

src/confguard/services.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = PosixPath('/Users/Q187392/dev/s/private/confguard/.confguard.bkp'), mode = 511, parents = True, exist_ok = False

    def mkdir(self, mode=0o777, parents=False, exist_ok=False):
        """
        Create a new directory at this given path.
        """
        try:
&gt;           os.mkdir(self, mode)
E           FileExistsError: [Errno 17] File exists: '/Users/Q187392/dev/s/private/confguard/.confguard.bkp'

../../../../.asdf/installs/python/3.11.1/lib/python3.11/pathlib.py:1116: FileExistsError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_services.TestFiles object at 0x107375210&gt;, targets = ['.run']

    @pytest.mark.parametrize(
        "targets",
        (
            ["xxx/xxx.txt"],
            [".run"],
            [".envrc", ".run"],
            [".envrc", ".run", "xxx/xxx.txt"],
        ),
    )
    def test_delete_bkp(self, targets):
        bkp_dir = Path.cwd() / CONFGUARD_BKP_DIR
        f = Files(rel_target_dir=SENTINEL, source_dir=Path.cwd(), targets=targets)
&gt;       f.create_bkp(source_dir=Path.cwd(), bkp_dir=bkp_dir)

tests/test_services.py:118: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Files(source_dir=PosixPath('/Users/Q187392/dev/s/private/confguard'), rel_target_dir=PosixPath('test_proj-1234'), target_dir=PosixPath('/tmp/confgruard/test_proj-1234'), targets=['.run'], target_locations=[], source_locations=[])
source_dir = PosixPath('/Users/Q187392/dev/s/private/confguard'), bkp_dir = PosixPath('/Users/Q187392/dev/s/private/confguard/.confguard.bkp')

    def create_bkp(self, source_dir: Path, bkp_dir: Path) -&gt; None:
        try:
            Path(bkp_dir).mkdir(parents=True, exist_ok=False)
        except FileExistsError:
&gt;           raise BackupExistError(f"Backup dir {bkp_dir} already exists.")
E           confguard.exceptions.BackupExistError: Backup dir /Users/Q187392/dev/s/private/confguard/.confguard.bkp already exists.

src/confguard/services.py:87: BackupExistError</failure></testcase><testcase classname="test_services.TestFiles" name="test_delete_bkp[targets2]" time="0.008"><failure message="confguard.exceptions.BackupExistError: Backup dir /Users/Q187392/dev/s/private/confguard/.confguard.bkp already exists.">self = Files(source_dir=PosixPath('/Users/Q187392/dev/s/private/confguard'), rel_target_dir=PosixPath('test_proj-1234'), target_dir=PosixPath('/tmp/confgruard/test_proj-1234'), targets=['.envrc', '.run'], target_locations=[], source_locations=[])
source_dir = PosixPath('/Users/Q187392/dev/s/private/confguard'), bkp_dir = PosixPath('/Users/Q187392/dev/s/private/confguard/.confguard.bkp')

    def create_bkp(self, source_dir: Path, bkp_dir: Path) -&gt; None:
        try:
&gt;           Path(bkp_dir).mkdir(parents=True, exist_ok=False)

src/confguard/services.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = PosixPath('/Users/Q187392/dev/s/private/confguard/.confguard.bkp'), mode = 511, parents = True, exist_ok = False

    def mkdir(self, mode=0o777, parents=False, exist_ok=False):
        """
        Create a new directory at this given path.
        """
        try:
&gt;           os.mkdir(self, mode)
E           FileExistsError: [Errno 17] File exists: '/Users/Q187392/dev/s/private/confguard/.confguard.bkp'

../../../../.asdf/installs/python/3.11.1/lib/python3.11/pathlib.py:1116: FileExistsError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_services.TestFiles object at 0x107375710&gt;, targets = ['.envrc', '.run']

    @pytest.mark.parametrize(
        "targets",
        (
            ["xxx/xxx.txt"],
            [".run"],
            [".envrc", ".run"],
            [".envrc", ".run", "xxx/xxx.txt"],
        ),
    )
    def test_delete_bkp(self, targets):
        bkp_dir = Path.cwd() / CONFGUARD_BKP_DIR
        f = Files(rel_target_dir=SENTINEL, source_dir=Path.cwd(), targets=targets)
&gt;       f.create_bkp(source_dir=Path.cwd(), bkp_dir=bkp_dir)

tests/test_services.py:118: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Files(source_dir=PosixPath('/Users/Q187392/dev/s/private/confguard'), rel_target_dir=PosixPath('test_proj-1234'), target_dir=PosixPath('/tmp/confgruard/test_proj-1234'), targets=['.envrc', '.run'], target_locations=[], source_locations=[])
source_dir = PosixPath('/Users/Q187392/dev/s/private/confguard'), bkp_dir = PosixPath('/Users/Q187392/dev/s/private/confguard/.confguard.bkp')

    def create_bkp(self, source_dir: Path, bkp_dir: Path) -&gt; None:
        try:
            Path(bkp_dir).mkdir(parents=True, exist_ok=False)
        except FileExistsError:
&gt;           raise BackupExistError(f"Backup dir {bkp_dir} already exists.")
E           confguard.exceptions.BackupExistError: Backup dir /Users/Q187392/dev/s/private/confguard/.confguard.bkp already exists.

src/confguard/services.py:87: BackupExistError</failure></testcase><testcase classname="test_services.TestFiles" name="test_delete_bkp[targets3]" time="0.015"><failure message="confguard.exceptions.BackupExistError: Backup dir /Users/Q187392/dev/s/private/confguard/.confguard.bkp already exists.">self = Files(source_dir=PosixPath('/Users/Q187392/dev/s/private/confguard'), rel_target_dir=PosixPath('test_proj-1234'), targ...'/tmp/confgruard/test_proj-1234'), targets=['.envrc', '.run', 'xxx/xxx.txt'], target_locations=[], source_locations=[])
source_dir = PosixPath('/Users/Q187392/dev/s/private/confguard'), bkp_dir = PosixPath('/Users/Q187392/dev/s/private/confguard/.confguard.bkp')

    def create_bkp(self, source_dir: Path, bkp_dir: Path) -&gt; None:
        try:
&gt;           Path(bkp_dir).mkdir(parents=True, exist_ok=False)

src/confguard/services.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = PosixPath('/Users/Q187392/dev/s/private/confguard/.confguard.bkp'), mode = 511, parents = True, exist_ok = False

    def mkdir(self, mode=0o777, parents=False, exist_ok=False):
        """
        Create a new directory at this given path.
        """
        try:
&gt;           os.mkdir(self, mode)
E           FileExistsError: [Errno 17] File exists: '/Users/Q187392/dev/s/private/confguard/.confguard.bkp'

../../../../.asdf/installs/python/3.11.1/lib/python3.11/pathlib.py:1116: FileExistsError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_services.TestFiles object at 0x107375410&gt;, targets = ['.envrc', '.run', 'xxx/xxx.txt']

    @pytest.mark.parametrize(
        "targets",
        (
            ["xxx/xxx.txt"],
            [".run"],
            [".envrc", ".run"],
            [".envrc", ".run", "xxx/xxx.txt"],
        ),
    )
    def test_delete_bkp(self, targets):
        bkp_dir = Path.cwd() / CONFGUARD_BKP_DIR
        f = Files(rel_target_dir=SENTINEL, source_dir=Path.cwd(), targets=targets)
&gt;       f.create_bkp(source_dir=Path.cwd(), bkp_dir=bkp_dir)

tests/test_services.py:118: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Files(source_dir=PosixPath('/Users/Q187392/dev/s/private/confguard'), rel_target_dir=PosixPath('test_proj-1234'), targ...'/tmp/confgruard/test_proj-1234'), targets=['.envrc', '.run', 'xxx/xxx.txt'], target_locations=[], source_locations=[])
source_dir = PosixPath('/Users/Q187392/dev/s/private/confguard'), bkp_dir = PosixPath('/Users/Q187392/dev/s/private/confguard/.confguard.bkp')

    def create_bkp(self, source_dir: Path, bkp_dir: Path) -&gt; None:
        try:
            Path(bkp_dir).mkdir(parents=True, exist_ok=False)
        except FileExistsError:
&gt;           raise BackupExistError(f"Backup dir {bkp_dir} already exists.")
E           confguard.exceptions.BackupExistError: Backup dir /Users/Q187392/dev/s/private/confguard/.confguard.bkp already exists.

src/confguard/services.py:87: BackupExistError</failure></testcase><testcase classname="test_services.TestFiles" name="test_delete_nonexisting_bkp" time="0.015" /><testcase classname="test_services.TestFiles" name="test_move_files[targets0]" time="0.013"><failure message="AssertionError: assert False&#10; +  where False = &lt;bound method Path.exists of PosixPath('/tmp/confgruard/test_proj-1234/xxx/xxx.txt')&gt;()&#10; +    where &lt;bound method Path.exists of PosixPath('/tmp/confgruard/test_proj-1234/xxx/xxx.txt')&gt; = PosixPath('/tmp/confgruard/test_proj-1234/xxx/xxx.txt').exists&#10; +      where PosixPath('/tmp/confgruard/test_proj-1234/xxx/xxx.txt') = Path(((PosixPath('/tmp/confgruard') / PosixPath('test_proj-1234')) / 'xxx/xxx.txt'))&#10; +        where PosixPath('/tmp/confgruard') = Environment(app_name='confguard', log_level='INFO', twbm_db_url='sqlite://///Users/Q187392/vimwiki/buku/bm.db', confguard_path=PosixPath('/tmp/confgruard'), confguard={'config': {'targets': ['.envrc', '.run']}}, config_path=PosixPath('.confguard')).confguard_path">self = &lt;tests.test_services.TestFiles object at 0x10738c550&gt;, targets = ['xxx/xxx.txt']

    @pytest.mark.parametrize(
        "targets",
        (
            ["xxx/xxx.txt"],
            [".run"],
            [".envrc", ".run"],
            [".envrc", ".run", "xxx/xxx.txt"],
        ),
    )
    def test_move_files(self, targets):
        f = Files(rel_target_dir=SENTINEL, source_dir=Path.cwd(), targets=targets)
        f.move_files(source_dir=Path.cwd(), target_dir=TARGET_DIR)
        for t in targets:
&gt;           assert Path(config.confguard_path / SENTINEL / t).exists()
E           AssertionError: assert False
E            +  where False = &lt;bound method Path.exists of PosixPath('/tmp/confgruard/test_proj-1234/xxx/xxx.txt')&gt;()
E            +    where &lt;bound method Path.exists of PosixPath('/tmp/confgruard/test_proj-1234/xxx/xxx.txt')&gt; = PosixPath('/tmp/confgruard/test_proj-1234/xxx/xxx.txt').exists
E            +      where PosixPath('/tmp/confgruard/test_proj-1234/xxx/xxx.txt') = Path(((PosixPath('/tmp/confgruard') / PosixPath('test_proj-1234')) / 'xxx/xxx.txt'))
E            +        where PosixPath('/tmp/confgruard') = Environment(app_name='confguard', log_level='INFO', twbm_db_url='sqlite://///Users/Q187392/vimwiki/buku/bm.db', confguard_path=PosixPath('/tmp/confgruard'), confguard={'config': {'targets': ['.envrc', '.run']}}, config_path=PosixPath('.confguard')).confguard_path

tests/test_services.py:143: AssertionError</failure></testcase><testcase classname="test_services.TestFiles" name="test_move_files[targets1]" time="0.010"><failure message="AssertionError: assert False&#10; +  where False = &lt;bound method Path.exists of PosixPath('/tmp/confgruard/test_proj-1234/.run')&gt;()&#10; +    where &lt;bound method Path.exists of PosixPath('/tmp/confgruard/test_proj-1234/.run')&gt; = PosixPath('/tmp/confgruard/test_proj-1234/.run').exists&#10; +      where PosixPath('/tmp/confgruard/test_proj-1234/.run') = Path(((PosixPath('/tmp/confgruard') / PosixPath('test_proj-1234')) / '.run'))&#10; +        where PosixPath('/tmp/confgruard') = Environment(app_name='confguard', log_level='INFO', twbm_db_url='sqlite://///Users/Q187392/vimwiki/buku/bm.db', confguard_path=PosixPath('/tmp/confgruard'), confguard={'config': {'targets': ['.envrc', '.run']}}, config_path=PosixPath('.confguard')).confguard_path">self = &lt;tests.test_services.TestFiles object at 0x10738c750&gt;, targets = ['.run']

    @pytest.mark.parametrize(
        "targets",
        (
            ["xxx/xxx.txt"],
            [".run"],
            [".envrc", ".run"],
            [".envrc", ".run", "xxx/xxx.txt"],
        ),
    )
    def test_move_files(self, targets):
        f = Files(rel_target_dir=SENTINEL, source_dir=Path.cwd(), targets=targets)
        f.move_files(source_dir=Path.cwd(), target_dir=TARGET_DIR)
        for t in targets:
&gt;           assert Path(config.confguard_path / SENTINEL / t).exists()
E           AssertionError: assert False
E            +  where False = &lt;bound method Path.exists of PosixPath('/tmp/confgruard/test_proj-1234/.run')&gt;()
E            +    where &lt;bound method Path.exists of PosixPath('/tmp/confgruard/test_proj-1234/.run')&gt; = PosixPath('/tmp/confgruard/test_proj-1234/.run').exists
E            +      where PosixPath('/tmp/confgruard/test_proj-1234/.run') = Path(((PosixPath('/tmp/confgruard') / PosixPath('test_proj-1234')) / '.run'))
E            +        where PosixPath('/tmp/confgruard') = Environment(app_name='confguard', log_level='INFO', twbm_db_url='sqlite://///Users/Q187392/vimwiki/buku/bm.db', confguard_path=PosixPath('/tmp/confgruard'), confguard={'config': {'targets': ['.envrc', '.run']}}, config_path=PosixPath('.confguard')).confguard_path

tests/test_services.py:143: AssertionError</failure></testcase><testcase classname="test_services.TestFiles" name="test_move_files[targets2]" time="0.009"><failure message="AssertionError: assert False&#10; +  where False = &lt;bound method Path.exists of PosixPath('/tmp/confgruard/test_proj-1234/.envrc')&gt;()&#10; +    where &lt;bound method Path.exists of PosixPath('/tmp/confgruard/test_proj-1234/.envrc')&gt; = PosixPath('/tmp/confgruard/test_proj-1234/.envrc').exists&#10; +      where PosixPath('/tmp/confgruard/test_proj-1234/.envrc') = Path(((PosixPath('/tmp/confgruard') / PosixPath('test_proj-1234')) / '.envrc'))&#10; +        where PosixPath('/tmp/confgruard') = Environment(app_name='confguard', log_level='INFO', twbm_db_url='sqlite://///Users/Q187392/vimwiki/buku/bm.db', confguard_path=PosixPath('/tmp/confgruard'), confguard={'config': {'targets': ['.envrc', '.run']}}, config_path=PosixPath('.confguard')).confguard_path">self = &lt;tests.test_services.TestFiles object at 0x10738ca10&gt;, targets = ['.envrc', '.run']

    @pytest.mark.parametrize(
        "targets",
        (
            ["xxx/xxx.txt"],
            [".run"],
            [".envrc", ".run"],
            [".envrc", ".run", "xxx/xxx.txt"],
        ),
    )
    def test_move_files(self, targets):
        f = Files(rel_target_dir=SENTINEL, source_dir=Path.cwd(), targets=targets)
        f.move_files(source_dir=Path.cwd(), target_dir=TARGET_DIR)
        for t in targets:
&gt;           assert Path(config.confguard_path / SENTINEL / t).exists()
E           AssertionError: assert False
E            +  where False = &lt;bound method Path.exists of PosixPath('/tmp/confgruard/test_proj-1234/.envrc')&gt;()
E            +    where &lt;bound method Path.exists of PosixPath('/tmp/confgruard/test_proj-1234/.envrc')&gt; = PosixPath('/tmp/confgruard/test_proj-1234/.envrc').exists
E            +      where PosixPath('/tmp/confgruard/test_proj-1234/.envrc') = Path(((PosixPath('/tmp/confgruard') / PosixPath('test_proj-1234')) / '.envrc'))
E            +        where PosixPath('/tmp/confgruard') = Environment(app_name='confguard', log_level='INFO', twbm_db_url='sqlite://///Users/Q187392/vimwiki/buku/bm.db', confguard_path=PosixPath('/tmp/confgruard'), confguard={'config': {'targets': ['.envrc', '.run']}}, config_path=PosixPath('.confguard')).confguard_path

tests/test_services.py:143: AssertionError</failure></testcase><testcase classname="test_services.TestFiles" name="test_move_files[targets3]" time="0.012"><failure message="AssertionError: assert False&#10; +  where False = &lt;bound method Path.exists of PosixPath('/tmp/confgruard/test_proj-1234/.envrc')&gt;()&#10; +    where &lt;bound method Path.exists of PosixPath('/tmp/confgruard/test_proj-1234/.envrc')&gt; = PosixPath('/tmp/confgruard/test_proj-1234/.envrc').exists&#10; +      where PosixPath('/tmp/confgruard/test_proj-1234/.envrc') = Path(((PosixPath('/tmp/confgruard') / PosixPath('test_proj-1234')) / '.envrc'))&#10; +        where PosixPath('/tmp/confgruard') = Environment(app_name='confguard', log_level='INFO', twbm_db_url='sqlite://///Users/Q187392/vimwiki/buku/bm.db', confguard_path=PosixPath('/tmp/confgruard'), confguard={'config': {'targets': ['.envrc', '.run']}}, config_path=PosixPath('.confguard')).confguard_path">self = &lt;tests.test_services.TestFiles object at 0x10738ccd0&gt;, targets = ['.envrc', '.run', 'xxx/xxx.txt']

    @pytest.mark.parametrize(
        "targets",
        (
            ["xxx/xxx.txt"],
            [".run"],
            [".envrc", ".run"],
            [".envrc", ".run", "xxx/xxx.txt"],
        ),
    )
    def test_move_files(self, targets):
        f = Files(rel_target_dir=SENTINEL, source_dir=Path.cwd(), targets=targets)
        f.move_files(source_dir=Path.cwd(), target_dir=TARGET_DIR)
        for t in targets:
&gt;           assert Path(config.confguard_path / SENTINEL / t).exists()
E           AssertionError: assert False
E            +  where False = &lt;bound method Path.exists of PosixPath('/tmp/confgruard/test_proj-1234/.envrc')&gt;()
E            +    where &lt;bound method Path.exists of PosixPath('/tmp/confgruard/test_proj-1234/.envrc')&gt; = PosixPath('/tmp/confgruard/test_proj-1234/.envrc').exists
E            +      where PosixPath('/tmp/confgruard/test_proj-1234/.envrc') = Path(((PosixPath('/tmp/confgruard') / PosixPath('test_proj-1234')) / '.envrc'))
E            +        where PosixPath('/tmp/confgruard') = Environment(app_name='confguard', log_level='INFO', twbm_db_url='sqlite://///Users/Q187392/vimwiki/buku/bm.db', confguard_path=PosixPath('/tmp/confgruard'), confguard={'config': {'targets': ['.envrc', '.run']}}, config_path=PosixPath('.confguard')).confguard_path

tests/test_services.py:143: AssertionError</failure></testcase><testcase classname="test_services.TestFiles" name="test_return_files[targets0]" time="0.020"><failure message="AssertionError: assert False&#10; +  where False = &lt;bound method Path.exists of PosixPath('/Users/Q187392/dev/s/private/confguard/xxx/xxx.txt')&gt;()&#10; +    where &lt;bound method Path.exists of PosixPath('/Users/Q187392/dev/s/private/confguard/xxx/xxx.txt')&gt; = PosixPath('/Users/Q187392/dev/s/private/confguard/xxx/xxx.txt').exists&#10; +      where PosixPath('/Users/Q187392/dev/s/private/confguard/xxx/xxx.txt') = Path((PosixPath('/Users/Q187392/dev/s/private/confguard') / 'xxx/xxx.txt'))&#10; +        where PosixPath('/Users/Q187392/dev/s/private/confguard') = Files(source_dir=PosixPath('/Users/Q187392/dev/s/private/confguard'), rel_target_dir=PosixPath('test_proj-1234'), target_dir=PosixPath('/tmp/confgruard/test_proj-1234'), targets=['xxx/xxx.txt'], target_locations=[], source_locations=[]).source_dir">self = &lt;tests.test_services.TestFiles object at 0x10738dc90&gt;, targets = ['xxx/xxx.txt']

    @pytest.mark.parametrize(
        "targets",
        (
            ["xxx/xxx.txt"],
            [".envrc", ".run"],
            [".envrc", ".run", "xxx/xxx.txt"],
        ),
    )
    def test_return_files(self, targets):
        # given
        f = Files(rel_target_dir=SENTINEL, source_dir=Path.cwd(), targets=targets)
        f.move_files(source_dir=Path.cwd(), target_dir=TARGET_DIR)
        # when
        f.return_files(source_dir=Path.cwd(), target_dir=TARGET_DIR)
        # then all files exist at their source destination again
        for t in targets:
&gt;           assert Path(f.source_dir / t).exists()
E           AssertionError: assert False
E            +  where False = &lt;bound method Path.exists of PosixPath('/Users/Q187392/dev/s/private/confguard/xxx/xxx.txt')&gt;()
E            +    where &lt;bound method Path.exists of PosixPath('/Users/Q187392/dev/s/private/confguard/xxx/xxx.txt')&gt; = PosixPath('/Users/Q187392/dev/s/private/confguard/xxx/xxx.txt').exists
E            +      where PosixPath('/Users/Q187392/dev/s/private/confguard/xxx/xxx.txt') = Path((PosixPath('/Users/Q187392/dev/s/private/confguard') / 'xxx/xxx.txt'))
E            +        where PosixPath('/Users/Q187392/dev/s/private/confguard') = Files(source_dir=PosixPath('/Users/Q187392/dev/s/private/confguard'), rel_target_dir=PosixPath('test_proj-1234'), target_dir=PosixPath('/tmp/confgruard/test_proj-1234'), targets=['xxx/xxx.txt'], target_locations=[], source_locations=[]).source_dir

tests/test_services.py:163: AssertionError</failure></testcase><testcase classname="test_services.TestFiles" name="test_return_files[targets1]" time="0.013"><failure message="AssertionError: assert False&#10; +  where False = &lt;bound method Path.exists of PosixPath('/Users/Q187392/dev/s/private/confguard/.envrc')&gt;()&#10; +    where &lt;bound method Path.exists of PosixPath('/Users/Q187392/dev/s/private/confguard/.envrc')&gt; = PosixPath('/Users/Q187392/dev/s/private/confguard/.envrc').exists&#10; +      where PosixPath('/Users/Q187392/dev/s/private/confguard/.envrc') = Path((PosixPath('/Users/Q187392/dev/s/private/confguard') / '.envrc'))&#10; +        where PosixPath('/Users/Q187392/dev/s/private/confguard') = Files(source_dir=PosixPath('/Users/Q187392/dev/s/private/confguard'), rel_target_dir=PosixPath('test_proj-1234'), target_dir=PosixPath('/tmp/confgruard/test_proj-1234'), targets=['.envrc', '.run'], target_locations=[], source_locations=[]).source_dir">self = &lt;tests.test_services.TestFiles object at 0x10738de90&gt;, targets = ['.envrc', '.run']

    @pytest.mark.parametrize(
        "targets",
        (
            ["xxx/xxx.txt"],
            [".envrc", ".run"],
            [".envrc", ".run", "xxx/xxx.txt"],
        ),
    )
    def test_return_files(self, targets):
        # given
        f = Files(rel_target_dir=SENTINEL, source_dir=Path.cwd(), targets=targets)
        f.move_files(source_dir=Path.cwd(), target_dir=TARGET_DIR)
        # when
        f.return_files(source_dir=Path.cwd(), target_dir=TARGET_DIR)
        # then all files exist at their source destination again
        for t in targets:
&gt;           assert Path(f.source_dir / t).exists()
E           AssertionError: assert False
E            +  where False = &lt;bound method Path.exists of PosixPath('/Users/Q187392/dev/s/private/confguard/.envrc')&gt;()
E            +    where &lt;bound method Path.exists of PosixPath('/Users/Q187392/dev/s/private/confguard/.envrc')&gt; = PosixPath('/Users/Q187392/dev/s/private/confguard/.envrc').exists
E            +      where PosixPath('/Users/Q187392/dev/s/private/confguard/.envrc') = Path((PosixPath('/Users/Q187392/dev/s/private/confguard') / '.envrc'))
E            +        where PosixPath('/Users/Q187392/dev/s/private/confguard') = Files(source_dir=PosixPath('/Users/Q187392/dev/s/private/confguard'), rel_target_dir=PosixPath('test_proj-1234'), target_dir=PosixPath('/tmp/confgruard/test_proj-1234'), targets=['.envrc', '.run'], target_locations=[], source_locations=[]).source_dir

tests/test_services.py:163: AssertionError</failure></testcase><testcase classname="test_services.TestFiles" name="test_return_files[targets2]" time="0.008"><failure message="AssertionError: assert False&#10; +  where False = &lt;bound method Path.exists of PosixPath('/Users/Q187392/dev/s/private/confguard/.envrc')&gt;()&#10; +    where &lt;bound method Path.exists of PosixPath('/Users/Q187392/dev/s/private/confguard/.envrc')&gt; = PosixPath('/Users/Q187392/dev/s/private/confguard/.envrc').exists&#10; +      where PosixPath('/Users/Q187392/dev/s/private/confguard/.envrc') = Path((PosixPath('/Users/Q187392/dev/s/private/confguard') / '.envrc'))&#10; +        where PosixPath('/Users/Q187392/dev/s/private/confguard') = Files(source_dir=PosixPath('/Users/Q187392/dev/s/private/confguard'), rel_target_dir=PosixPath('test_proj-1234'), target_dir=PosixPath('/tmp/confgruard/test_proj-1234'), targets=['.envrc', '.run', 'xxx/xxx.txt'], target_locations=[], source_locations=[]).source_dir">self = &lt;tests.test_services.TestFiles object at 0x10738e150&gt;, targets = ['.envrc', '.run', 'xxx/xxx.txt']

    @pytest.mark.parametrize(
        "targets",
        (
            ["xxx/xxx.txt"],
            [".envrc", ".run"],
            [".envrc", ".run", "xxx/xxx.txt"],
        ),
    )
    def test_return_files(self, targets):
        # given
        f = Files(rel_target_dir=SENTINEL, source_dir=Path.cwd(), targets=targets)
        f.move_files(source_dir=Path.cwd(), target_dir=TARGET_DIR)
        # when
        f.return_files(source_dir=Path.cwd(), target_dir=TARGET_DIR)
        # then all files exist at their source destination again
        for t in targets:
&gt;           assert Path(f.source_dir / t).exists()
E           AssertionError: assert False
E            +  where False = &lt;bound method Path.exists of PosixPath('/Users/Q187392/dev/s/private/confguard/.envrc')&gt;()
E            +    where &lt;bound method Path.exists of PosixPath('/Users/Q187392/dev/s/private/confguard/.envrc')&gt; = PosixPath('/Users/Q187392/dev/s/private/confguard/.envrc').exists
E            +      where PosixPath('/Users/Q187392/dev/s/private/confguard/.envrc') = Path((PosixPath('/Users/Q187392/dev/s/private/confguard') / '.envrc'))
E            +        where PosixPath('/Users/Q187392/dev/s/private/confguard') = Files(source_dir=PosixPath('/Users/Q187392/dev/s/private/confguard'), rel_target_dir=PosixPath('test_proj-1234'), target_dir=PosixPath('/tmp/confgruard/test_proj-1234'), targets=['.envrc', '.run', 'xxx/xxx.txt'], target_locations=[], source_locations=[]).source_dir

tests/test_services.py:163: AssertionError</failure></testcase><testcase classname="test_services.TestLinks" name="test_create_links[targets0]" time="0.008"><failure message="FileExistsError: [Errno 17] File exists: '../../../../../../tmp/confgruard/test_proj-1234/.envrc' -&gt; '/Users/Q187392/dev/s/private/confguard/.envrc'">self = &lt;tests.test_services.TestLinks object at 0x10738ebd0&gt;, clear_test_proj = None, targets = ['.envrc', '.run', 'xxx/xxx.txt']

    @pytest.mark.parametrize("targets", ([".envrc", ".run", "xxx/xxx.txt"],))
    def test_create_links(self, clear_test_proj, targets):
        lk = Links(source_dir=Path.cwd(), target_dir=TARGET_DIR, targets=targets)
&gt;       lk.create(is_relative=True)

tests/test_services.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/confguard/services.py:176: in create
    src_path.symlink_to(tgt_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = PosixPath('/Users/Q187392/dev/s/private/confguard/.envrc'), target = PosixPath('../../../../../../tmp/confgruard/test_proj-1234/.envrc'), target_is_directory = False

    def symlink_to(self, target, target_is_directory=False):
        """
        Make this path a symlink pointing to the target path.
        Note the order of arguments (link, target) is the reverse of os.symlink.
        """
        if not hasattr(os, "symlink"):
            raise NotImplementedError("os.symlink() not available on this system")
&gt;       os.symlink(target, self, target_is_directory)
E       FileExistsError: [Errno 17] File exists: '../../../../../../tmp/confgruard/test_proj-1234/.envrc' -&gt; '/Users/Q187392/dev/s/private/confguard/.envrc'

../../../../.asdf/installs/python/3.11.1/lib/python3.11/pathlib.py:1198: FileExistsError</failure></testcase><testcase classname="test_services.TestLinks" name="test_remove_links[targets0]" time="0.010"><failure message="FileExistsError: [Errno 17] File exists: '/tmp/confgruard/test_proj-1234/.envrc' -&gt; '/Users/Q187392/dev/s/private/confguard/.envrc'">self = &lt;tests.test_services.TestLinks object at 0x10738f5d0&gt;, clear_test_proj = None, targets = ['.envrc', '.run', 'xxx/xxx.txt']

    @pytest.mark.parametrize("targets", ([".envrc", ".run", "xxx/xxx.txt"],))
    def test_remove_links(self, clear_test_proj, targets):
        lk = Links(source_dir=Path.cwd(), target_dir=TARGET_DIR, targets=targets)
&gt;       lk.create()

tests/test_services.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/confguard/services.py:176: in create
    src_path.symlink_to(tgt_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = PosixPath('/Users/Q187392/dev/s/private/confguard/.envrc'), target = PosixPath('/tmp/confgruard/test_proj-1234/.envrc'), target_is_directory = False

    def symlink_to(self, target, target_is_directory=False):
        """
        Make this path a symlink pointing to the target path.
        Note the order of arguments (link, target) is the reverse of os.symlink.
        """
        if not hasattr(os, "symlink"):
            raise NotImplementedError("os.symlink() not available on this system")
&gt;       os.symlink(target, self, target_is_directory)
E       FileExistsError: [Errno 17] File exists: '/tmp/confgruard/test_proj-1234/.envrc' -&gt; '/Users/Q187392/dev/s/private/confguard/.envrc'

../../../../.asdf/installs/python/3.11.1/lib/python3.11/pathlib.py:1198: FileExistsError</failure></testcase><testcase classname="test_services.TestLinks" name="test_remove_non_existing_links[targets0]" time="0.009"><failure message="FileExistsError: [Errno 17] File exists: '/tmp/confgruard/test_proj-1234/.envrc' -&gt; '/Users/Q187392/dev/s/private/confguard/.envrc'">self = &lt;tests.test_services.TestLinks object at 0x10739c050&gt;, caplog = &lt;_pytest.logging.LogCaptureFixture object at 0x1074bb1d0&gt;, clear_test_proj = None, targets = ['.envrc', '.run', 'xxx/xxx.txt']

    @pytest.mark.parametrize("targets", ([".envrc", ".run", "xxx/xxx.txt"],))
    def test_remove_non_existing_links(self, caplog, clear_test_proj, targets):
        caplog.set_level(logging.DEBUG)
        lk = Links(source_dir=Path.cwd(), target_dir=TARGET_DIR, targets=targets)
&gt;       lk.create()

tests/test_services.py:209: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/confguard/services.py:176: in create
    src_path.symlink_to(tgt_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = PosixPath('/Users/Q187392/dev/s/private/confguard/.envrc'), target = PosixPath('/tmp/confgruard/test_proj-1234/.envrc'), target_is_directory = False

    def symlink_to(self, target, target_is_directory=False):
        """
        Make this path a symlink pointing to the target path.
        Note the order of arguments (link, target) is the reverse of os.symlink.
        """
        if not hasattr(os, "symlink"):
            raise NotImplementedError("os.symlink() not available on this system")
&gt;       os.symlink(target, self, target_is_directory)
E       FileExistsError: [Errno 17] File exists: '/tmp/confgruard/test_proj-1234/.envrc' -&gt; '/Users/Q187392/dev/s/private/confguard/.envrc'

../../../../.asdf/installs/python/3.11.1/lib/python3.11/pathlib.py:1198: FileExistsError</failure></testcase><testcase classname="test_services.TestLinks" name="test_back_create" time="0.012" /><testcase classname="test_services.TestLinks" name="test_back_remove" time="0.022" /></testsuite></testsuites>